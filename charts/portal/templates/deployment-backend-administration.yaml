###############################################################
# Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
###############################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.administration.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.backend.administration.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.administration.name }}
    spec:
      containers:
      - name: {{ .Values.backend.administration.name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.backend.administration.image.name }}:{{ .Values.backend.administration.image.administrationservicetag | default .Chart.AppVersion }}"
        imagePullPolicy: "Always"
        ports:
        - containerPort: {{ .Values.portContainer }}
        env:
        - name: "CHECKLIST__BPDM__BASEADDRESS"
          value: "{{ .Values.backend.checklistworker.bpdm.baseAddress }}"
        - name: "CHECKLIST__BPDM__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "bpdm-client-id"
        - name: "CHECKLIST__BPDM__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "bpdm-client-secret"
        - name: "CHECKLIST__BPDM__GRANTTYPE"
          value: "{{ .Values.backend.checklistworker.bpdm.grantType }}"
        - name: "CHECKLIST__BPDM__KEYCLOAKTOKENADDRESS"
          value: "{{ .Values.backend.checklistworker.bpdm.tokenAddress }}"
        - name: "CHECKLIST__BPDM__PASSWORD"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__BPDM__SCOPE"
          value: "{{ .Values.backend.checklistworker.bpdm.scope }}"
        - name: "CHECKLIST__BPDM__USERNAME"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__CLEARINGHOUSE__BASEADDRESS"
          value: "{{ .Values.backend.checklistworker.clearinghouse.baseAddress }}"
        - name: "CHECKLIST__CLEARINGHOUSE__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "clearinghouse-client-id"
        - name: "CHECKLIST__CLEARINGHOUSE__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "clearinghouse-client-secret"
        - name: "CHECKLIST__CLEARINGHOUSE__GRANTTYPE"
          value: "{{ .Values.backend.checklistworker.clearinghouse.grantType }}"
        - name: "CHECKLIST__CLEARINGHOUSE__KEYCLOAKTOKENADDRESS"
          value: "{{ .Values.backend.checklistworker.clearinghouse.tokenAddress }}"
        - name: "CHECKLIST__CLEARINGHOUSE__PASSWORD"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__CLEARINGHOUSE__SCOPE"
          value: "{{ .Values.backend.checklistworker.clearinghouse.scope }}"
        - name: "CHECKLIST__CLEARINGHOUSE__USERNAME"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__CUSTODIAN__BASEADDRESS"
          value: "{{ .Values.backend.checklistworker.custodian.baseAddress }}"
        - name: "CHECKLIST__CUSTODIAN__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "custodian-client-id"
        - name: "CHECKLIST__CUSTODIAN__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "custodian-client-secret"
        - name: "CHECKLIST__CUSTODIAN__GRANTTYPE"
          value: "{{ .Values.backend.checklistworker.custodian.grantType }}"
        - name: "CHECKLIST__CUSTODIAN__KEYCLOAKTOKENADDRESS"
          value: "{{ .Values.backend.checklistworker.custodian.tokenAddress }}"
        - name: "CHECKLIST__CUSTODIAN__PASSWORD"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__CUSTODIAN__SCOPE"
          value: "{{ .Values.backend.checklistworker.custodian.scope }}"
        - name: "CHECKLIST__CUSTODIAN__USERNAME"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__SDFACTORY__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "sdfactory-client-id"
        - name: "CHECKLIST__SDFACTORY__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "sdfactory-client-secret"
        - name: "CHECKLIST__SDFACTORY__GRANTTYPE"
          value: "{{ .Values.backend.checklistworker.sdfactory.grantType }}"
        - name: "CHECKLIST__SDFACTORY__KEYCLOAKTOKENADDRESS"
          value: "{{ .Values.backend.checklistworker.sdfactory.tokenAddress }}"
        - name: "CHECKLIST__SDFACTORY__PASSWORD"
          value: "{{ .Values.backend.placeholder }}"
        - name: "CHECKLIST__SDFACTORY__SCOPE"
          value: "{{ .Values.backend.checklistworker.sdfactory.scope }}"
        - name: "CHECKLIST__SDFACTORY__SDFACTORYISSUERBPN"
          value: "{{ .Values.backend.checklistworker.sdfactory.issuerBpn }}"
        - name: "CHECKLIST__SDFACTORY__SDFACTORYURL"
          value: "{{ .Values.backend.checklistworker.sdfactory.baseAddress }}"
        - name: "CHECKLIST__SDFACTORY__USERNAME"
          value: "{{ .Values.backend.placeholder }}"
        - name: "PORTAL_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.postgresql.auth.existingSecret }}"
              key: "portal-password"
        - name: "PROVISIONING_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.postgresql.auth.existingSecret }}"
              key: "provisioning-password"
        - name: "CONNECTIONSTRINGS__PORTALDB"
          value: "Server={{ .Values.postgresql.fullnameOverride }}-primary;Database={{ .Values.postgresql.auth.database }};Port={{ .Values.backend.dbConnection.port }};User Id={{ .Values.postgresql.auth.portalUser }};Password=$(PORTAL_PASSWORD);Ssl Mode={{ .Values.backend.dbConnection.sslMode }};"
        - name: "CONNECTIONSTRINGS__PROVISIONINGDB"
          value: "Server={{ .Values.postgresql.fullnameOverride }}-primary;Database={{ .Values.postgresql.auth.database }};Port={{ .Values.backend.dbConnection.port }};User Id={{ .Values.postgresql.auth.provisioningUser }};Password=$(PROVISIONING_PASSWORD);Ssl Mode={{ .Values.backend.dbConnection.sslMode }};"
        - name: "CONNECTORS__VALIDCERTIFICATIONCONTENTTYPES__0"
          value: "{{ .Values.backend.administration.connectors.validCertificationContentTypes.type0 }}"
        - name: "CONNECTORS__VALIDCERTIFICATIONCONTENTTYPES__1"
          value: "{{ .Values.backend.administration.connectors.validCertificationContentTypes.type1 }}"
        - name: "CONNECTORS__VALIDCERTIFICATIONCONTENTTYPES__2"
          value: "{{ .Values.backend.administration.connectors.validCertificationContentTypes.type2 }}"
        - name: "CONNECTORS__VALIDCERTIFICATIONCONTENTTYPES__3"
          value: "{{ .Values.backend.administration.connectors.validCertificationContentTypes.type3 }}"
        - name: "DAPS__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "daps-client-id"
        - name: "DAPS__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.interfaces.secret }}"
              key: "daps-client-secret"
        - name: "DAPS__DAPSURL"
          value: "{{ .Values.backend.administration.daps.baseAddress }}"
        - name: "DAPS__GRANTTYPE"
          value: "{{ .Values.backend.administration.daps.grantType }}"
        - name: "DAPS__KEYCLOAKTOKENADDRESS"
          value: "{{ .Values.backend.administration.daps.tokenAddress }}"
        - name: "DAPS__PASSWORD"
          value: "{{ .Values.backend.placeholder }}"
        - name: "DAPS__SCOPE"
          value: "{{ .Values.backend.administration.daps.scope }}"
        - name: "DAPS__USERNAME"
          value: "{{ .Values.backend.placeholder }}"
        - name: "KEYCLOAK_CENTRAL_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "central-db-password"
        - name: "DATABASEACCESS__KEYCLOAK__CONNECTIONSTRING"
          value: "Server={{ .Values.backend.keycloak.central.dbConnection.host }};Database={{ .Values.backend.keycloak.central.dbConnection.database }};Port={{ .Values.backend.keycloak.central.dbConnection.port }};User Id={{ .Values.backend.keycloak.central.dbConnection.user }};Password=$(KEYCLOAK_CENTRAL_PASSWORD);Ssl Mode={{ .Values.backend.keycloak.central.dbConnection.sslMode }};"
        - name: "DATABASEACCESS__KEYCLOAK__DATABASESCHEMA"
          value: "{{ .Values.backend.keycloak.central.dbConnection.schema }}"
        - name: "DATABASEACCESS__PORTAL__CONNECTIONSTRING"
          value: "Server={{ .Values.postgresql.fullnameOverride }}-primary;Database={{ .Values.postgresql.auth.database }};Port={{ .Values.backend.dbConnection.port }};User Id={{ .Values.postgresql.auth.portalUser }};Password=$(PORTAL_PASSWORD);Ssl Mode={{ .Values.backend.dbConnection.sslMode }};"
        - name: "DATABASEACCESS__PORTAL__DATABASESCHEMA"
          value: "{{ .Values.backend.dbConnection.schema }}"
        - name: "DEBUGENABLED"
          value: "{{ .Values.backend.administration.debugEnabled }}"
        - name: "Document__EnableSeedEndpoint"
          value: "True"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__CHARSET"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.charset }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__CONTENTTYPE"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.contentType }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__FILENAME"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.fileName }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADEREMAIL"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerEmail }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERFIRSTNAME"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerFirstName }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERLASTNAME"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerLastName }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERPROVIDERALIAS"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerProviderAlias }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERPROVIDERUSERID"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerProviderUserId }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERPROVIDERUSERNAME"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerProviderUserName }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__HEADERUSERID"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.headerUserId }}"
        - name: "IDENTITYPROVIDERADMIN__CSVSETTINGS__SEPARATOR"
          value: "{{ .Values.backend.administration.identityProviderAdmin.csvSettings.separator }}"
        - name: "INVITATION__INVITEDUSERINITIALROLES__Cl1-CX-Registration__0"
          value: "{{ .Values.backend.administration.invitation.invitedUserInitialRoles.role }}"
        - name: "INVITATION__REGISTRATIONAPPADDRESS"
          value: "{{ .Values.backend.registration.basePortalAddress }}"
        - name: "JWTBEAREROPTIONS__METADATAADDRESS"
          value: "{{ .Values.backend.keycloak.central.jwtBearerOptions.metadataAddress }}"
        - name: "JWTBEAREROPTIONS__TOKENVALIDATIONPARAMETERS__VALIDAUDIENCE"
          value: "{{ .Values.backend.keycloak.central.jwtBearerOptions.tokenValidationParameters.validAudience }}"
        - name: "JWTBEAREROPTIONS__TOKENVALIDATIONPARAMETERS__VALIDISSUER"
          value: "{{ .Values.backend.keycloak.central.jwtBearerOptions.tokenValidationParameters.validIssuer }}"
        - name: "KEYCLOAK__CENTRAL__AUTHREALM"
          value: "{{ .Values.backend.keycloak.central.authRealm }}"
        - name: "KEYCLOAK__CENTRAL__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "central-client-id"
        - name: "KEYCLOAK__CENTRAL__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "central-client-secret"
        - name: "KEYCLOAK__CENTRAL__CONNECTIONSTRING"
          value: "{{ .Values.backend.keycloak.central.baseAddress }}"
        - name: "KEYCLOAK__SHARED__AUTHREALM"
          value: "{{ .Values.backend.keycloak.shared.authRealm }}"
        - name: "KEYCLOAK__SHARED__CLIENTID"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "shared-client-id"
        - name: "KEYCLOAK__SHARED__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "shared-client-secret"
        - name: "KEYCLOAK__SHARED__CONNECTIONSTRING"
          value: "{{ .Values.backend.keycloak.shared.baseAddress }}"
        - name: "MAILINGSERVICE__MAIL__SMTPHOST"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.mailing.secret }}"
              key: "host"
        - name: "MAILINGSERVICE__MAIL__SMTPPASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.mailing.secret }}"
              key: "password"
        - name: "MAILINGSERVICE__MAIL__SMTPPORT"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.mailing.secret }}"
              key: "port"
        - name: "MAILINGSERVICE__MAIL__SMTPUSER"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.mailing.secret }}"
              key: "user"
        - name: "PROVISIONING__CENTRALIDENTITYPROVIDER__CONFIG__CLIENTID"
          value: "{{ .Values.backend.provisioning.centralIdentityProvider.clientId }}"
        - name: "PROVISIONING__CENTRALREALM"
          value: "{{ .Values.backend.provisioning.centralRealm }}"
        - name: "PROVISIONING__CENTRALREALMID"
          value: "{{ .Values.backend.provisioning.centralRealmId }}"
        - name: "PROVISIONING__INVITEDUSERINITIALROLES__Cl1-CX-Registration__0"
          value: "{{ .Values.backend.provisioning.invitedUserInitialRoles.registration }}"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__AUTH"
          value: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.auth }}"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__FROM"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-from"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__HOST"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-host"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-password"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__PORT"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-port"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__REPLYTO"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-replyto"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__STARTTLS"
          value: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.startTls }}"
        - name: "PROVISIONING__SHAREDREALM__SMTPSERVER__USER"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.provisioning.sharedRealm.smtpServer.secret }}"
              key: "provisioning-sharedrealm-user"
        - name: "PROVISIONING__SHAREDREALMCLIENT__CLIENTID"
          value: "{{ .Values.backend.provisioning.sharedRealmClient.clientId }}"
        - name: "REGISTRATION__DOCUMENTTYPEIDS__0"
          value: "{{ .Values.backend.administration.registration.documentTypeIds.type0 }}"
        - name: "REGISTRATION__PARTNERUSERINITIALROLES__Cl1-CX-Registration__0"
          value: "{{ .Values.backend.administration.registration.partnerUserInitialRoles.role }}"
        - name: "SERVICEACCOUNT__CLIENTID"
          value: "{{ .Values.backend.administration.serviceAccount.clientId }}"
        - name: "SWAGGERENABLED"
          value: "{{ .Values.backend.administration.swaggerEnabled }}"
        - name: "USERMANAGEMENT__COMPANYUSERSTATUSIDS__0"
          value: "{{ .Values.backend.administration.userManagement.companyUserStatusIds.status0 }}"
        - name: "USERMANAGEMENT__COMPANYUSERSTATUSIDS__1"
          value: "{{ .Values.backend.administration.userManagement.companyUserStatusIds.status1 }}"
        - name: "USERMANAGEMENT__PORTAL__BASEPORTALADDRESS"
          value: "{{ .Values.backend.basePortalAddress }}"
        - name: "USERMANAGEMENT__PORTAL__KEYCLOAKCLIENTID"
          value: "{{ .Values.backend.administration.keycloakClientId }}"
