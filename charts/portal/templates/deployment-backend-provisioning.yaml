###############################################################
# Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
###############################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.provisioning.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      app: {{ .Values.backend.provisioning.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.provisioning.service.name }}
    spec:
      containers:
      - name: {{ .Values.backend.provisioning.service.name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.backend.provisioning.service.image.name }}:{{ .Values.backend.provisioning.service.image.provisioningservicetag | default .Chart.AppVersion }}"
        imagePullPolicy: "Always"
        env:
        {{- if .Values.postgresql.enabled }}
        - name: "PROVISIONING_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.postgresql.auth.existingSecret }}"
              key: "provisioning-password"
        - name: "CONNECTIONSTRINGS__PROVISIONINGDB"
          value: "Server={{ .Values.postgresql.fullnameOverride }}-primary;Database={{ .Values.postgresql.auth.database }};Port={{ .Values.postgresql.auth.port }};User Id={{ .Values.postgresql.auth.provisioningUser }};Password=$(PROVISIONING_PASSWORD);Ssl Mode={{ .Values.backend.dbConnection.sslMode }};"
        {{- end }}
        {{- if not .Values.postgresql.enabled }}
        - name: "PROVISIONING_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.externalDatabase.secret }}"
              key: "provisioning-password"
        - name: "CONNECTIONSTRINGS__PROVISIONINGDB"
          value: "Server={{ .Values.externalDatabase.host }};Database={{ .Values.externalDatabase.database }};Port={{ .Values.externalDatabase.port }};User Id={{ .Values.externalDatabase.provisioningUser }};Password=$(PROVISIONING_PASSWORD);Ssl Mode={{ .Values.backend.dbConnection.sslMode }};"
        {{- end }}
        - name: "JWTBEAREROPTIONS__METADATAADDRESS"
          value: "{{ .Values.centralidpAddress }}{{ .Values.backend.keycloak.central.jwtBearerOptions.metadataPath }}"
        - name: "JWTBEAREROPTIONS__TOKENVALIDATIONPARAMETERS__VALIDAUDIENCE"
          value: "{{ .Values.backend.keycloak.central.jwtBearerOptions.tokenValidationParameters.validAudiencePortal }}"
        - name: "JWTBEAREROPTIONS__TOKENVALIDATIONPARAMETERS__VALIDISSUER"
          value: "{{ .Values.centralidpAddress }}{{ .Values.backend.keycloak.central.jwtBearerOptions.tokenValidationParameters.validIssuerPath }}"
        - name: "KEYCLOAK__CENTRAL__AUTHREALM"
          value: "{{ .Values.backend.keycloak.central.authRealm }}"
        - name: "KEYCLOAK__CENTRAL__CLIENTID"
          value: "{{ .Values.backend.keycloak.central.clientId }}"
        - name: "KEYCLOAK__CENTRAL__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "central-client-secret"
        - name: "KEYCLOAK__CENTRAL__CONNECTIONSTRING"
          value: "{{ .Values.centralidpAddress }}"
        - name: "KEYCLOAK__SHARED__AUTHREALM"
          value: "{{ .Values.backend.keycloak.shared.authRealm }}"
        - name: "KEYCLOAK__SHARED__CLIENTID"
          value: "{{ .Values.backend.keycloak.shared.clientId }}"
        - name: "KEYCLOAK__SHARED__CLIENTSECRET"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.backend.keycloak.secret }}"
              key: "shared-client-secret"
        - name: "KEYCLOAK__SHARED__CONNECTIONSTRING"
          value: "{{ .Values.sharedidpAddress }}"
        - name: "PROVISIONING__CENTRALREALM"
          value: "{{ .Values.backend.provisioning.centralRealm }}"
        - name: "SWAGGERENABLED"
          value: "{{ .Values.backend.provisioning.service.swaggerEnabled }}"
        ports:
        - name: http
          containerPort: {{ .Values.portContainer }}
          protocol: TCP
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
